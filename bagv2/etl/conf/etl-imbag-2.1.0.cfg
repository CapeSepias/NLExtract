# Process-chains for extracting BAG source data from input zip files to PostGIS.
# A Chain is a series of Components: one Input, zero or more Filters and one Output.
# The output of a Component is connected to the input of the next Component (except for
# the final Output Component, which writes to the final destination, e.g. PostGIS or GeoPackage..
#
# Currently the following chains are executed in the following order:
# - SQL pre:  DB initialization, delete tables, create schema
# - CBS gemeente provincie koppelingen
# - BAG Woonplaats-Gemeente Koppeling (onderdeel van BAG Extract Kadaster product)
# - input_bag_zip_file: inlezen BAG in PostGIS met LVBAG Driver
# - input_sql_post: post=processing o.a. aanmaken VIEWs
#
# Any substitutable values are specified in curly brackets e.g. {password}.
# Actual values can be passed as args to Stetl main.py.

# Just van den Broecke - 2021

[etl]
chains = input_sql_pre|output_postgres_sql,
         input_cbs_gemeenten_csv|output_postgres_gemeenten,
         input_bag_wpl_gem_koppeling_file|convert_vsi_to_etree_doc|transformer_xslt_gem_wpl|output_ogr_postgis,
         input_bag_zip_file|output_ogr2ogr,
         input_sql_post|output_postgres_sql

# chains = input_sql_post|output_postgres_sql

# Pre SQL file inputs to be executed
[input_sql_pre]
class = stetl.inputs.fileinput.StringFileInput
file_path = sql/create-schema.sql,sql/create-meta.sql,sql/create-tables.sql
format_args = schema:{schema}

# Post SQL file inputs to be executed
[input_sql_post]
class = stetl.inputs.fileinput.StringFileInput
file_path = sql/finalize-tables.sql,sql/create-views.sql,sql/create-indexes.sql
format_args = schema:{schema}

# Input file gemeente-provincies van CBS per jaar
[input_cbs_gemeenten_csv]
class = stetl.inputs.fileinput.CsvFileInput
file_path = data/cbs/gemeente/{cbs_gemeenten_jaar}.csv
delimiter = ;

# Postgres provincie_gemeente tabel wegschrijven
[output_postgres_gemeenten]
class = stetl.outputs.dboutput.PostgresInsertOutput
database = {pg_db}
host = {pg_host}
port = {pg_port}
user = {pg_user}
password = {password}
schema = {schema}
table = provincie_gemeente
key = gemeentecode
replace = true

# Algemeene Postgres SQL Executor
[output_postgres_sql]
class = stetl.outputs.dboutput.PostgresDbOutput
database = {pg_db}
host = {pg_host}
port = {pg_port}
user = {pg_user}
password = {password}
schema = {schema}

# The zip file for the LV zipfile directly
# contains the zip files for each bag obj type
# Outputs VsiZip file strings
[input_bag_zip_file]
class = stetl.inputs.fileinput.VsiZipFileInput
file_path = {bag_input_file}
name_filter = {bag_obj_file_pat}*.{file_ext_filter}

# The GEM-WPL-RELATIE XML Input file
[input_bag_wpl_gem_koppeling_file]
class = stetl.inputs.fileinput.VsiZipFileInput
file_path = {bag_input_file}
name_filter = GEM-WPL-RELATIE*.xml

# generic converter: OGR VSI (zip) path string to parsed XML tree doc
[convert_vsi_to_etree_doc]
class = stetl.filters.formatconverter.FormatConverter
input_format = gdal_vsi_path
output_format = etree_doc

# XSLT transformer GEM-WPL-RELATIE to OGR Simple Feature GML doctree
[transformer_xslt_gem_wpl]
class = stetl.filters.xsltfilter.XsltFilter
script = xsl/GEM-WPL-RELATIE2gml.xsl

# The ogr2ogr command-line for generic GML Features.
[output_ogr_postgis]
class = stetl.outputs.ogroutput.Ogr2OgrOutput
temp_file = temp/bagger.xml
ogr2ogr_cmd = ogr2ogr
    -overwrite
    {layer_creation_opts}
    -f PostgreSQL
    "PG:dbname={pg_db} host={pg_host} port={pg_port} user={pg_user} password={password} active_schema={schema}"
    -oo GFS_TEMPLATE=gfs/imbag-2.1.0.gfs
    -oo WRITE_GFS=NO
    {srs_opts}
    temp/bagger.xml

# The ogr2ogr command-line for LVBAG, may use any output here, as long as
# the input is a BAG Object Zip file. The input file-path is passed
# as data Packet to this component.
[output_ogr2ogr]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput

# Must set as multiple input formats supported
input_format = gdal_vsi_path

# destination format: OGR vector format name
dest_format = PostgreSQL
# destination datasource: name of datasource
dest_data_source = "PG:dbname={pg_db} host={pg_host} port={pg_port} user={pg_user} password={password} active_schema={schema}"
# layer creation options will only be added to ogr2ogr on first run
lco = {layer_creation_opts}

# spatial_extent, translates to -spat xmin ymin xmax ymax
spatial_extent = {spatial_extent}
# miscellaneous ogr2ogr options
options = -append -skipfailures {srs_opts} {feat_per_tx} {multival_opts} {open_opts}
# cleanup input?
cleanup_input = False

# Alternative outputs for testing

# Send to stdout
[output_std]
class = stetl.outputs.standardoutput.StandardOutput
