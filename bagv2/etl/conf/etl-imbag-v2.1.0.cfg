# Process-chains for extracting BAG source data from input zip files to PostGIS.
# A Chain is a series of Components: one Input, zero or more Filters and one Output.
# The output of a Component is connected to the input of the next Component (except for
# the final Output Component, which writes to the final destination, e.g. PostGIS or GeoPackage..
#
# Currently 3 chains are executed in the following order:
# - SQL pre:  DB initialization, delete tables, create schema
# - Main ETL chain, consists of the following components
# 1. input_bag_lv_zip_file: reads files from input ZIP file(s)
# 3. output_ogr2ogr: output using ogr2ogr, input is a zip file for one BAG object type, output can be any OGR output
#
# Any substitutable values are specified in curly brackets e.g. {password}.
# Actual values can be passed as args to Stetl main.py.

[etl]
chains = input_sql_pre|schema_name_filter|output_postgres,
         input_bag_lv_zip_file|output_ogr2ogr
         # input_sql_pre|schema_name_filter|output_postgres,
#         input_bag_obj_zip_file|output_std,
#         input_bag_gem_zip_file|output_std,
#         input_bag_lv_zip_file|output_ogr2ogr
         # input_bag_obj_zip_file|output_ogr2ogr
#         input_bag_zip_file|extract_bagobj_zip_file|vsizip_prepend|output_std
#         input_sql_post|schema_name_filter|output_postgres

# Pre SQL file inputs to be executed
[input_sql_pre]
class = stetl.inputs.fileinput.StringFileInput
file_path = sql/create-schema.sql

# Post SQL file inputs to be executed
[input_sql_post]
class = stetl.inputs.fileinput.StringFileInput
file_path = sql/create-views-.sql,sql/fix-eindregistratie.sql

# Generic filter to substitute Python-format string values like {schema} in string
[schema_name_filter]
class = stetl.filters.stringfilter.StringSubstitutionFilter
# format args {schema} is schema name
format_args = schema:{schema}

[output_postgres]
class = stetl.outputs.dboutput.PostgresDbOutput
database = {database}
host = {host}
port = {port}
user = {user}
password = {password}
schema = {schema}

# The source input ZIP-file(s) for a Gemeente (Municipality)
# Has different zip structure than country-wide (LV) BAG.
[input_bag_obj_zip_file]
class = stetl.inputs.fileinput.VsiZipFileInput
file_path = {input_dir}/0221PND15092020.zip
name_filter = {bag_obj_file_pat}*.xml

# The zip file within the gem zipfile contains the zip files for each bag obj type
[input_bag_gem_zip_file]
class = stetl.inputs.fileinput.VsiZipFileInput
file_path = test/BAGGEM0221L-15022021.zip
# 0221NUM15022021-000001.xml
# 9999PND08112020.zip
name_filter = {bag_obj_file_pat}*.xml

# The zip file for the LV zipfile directly contains the zip files for each bag obj type
[input_bag_lv_zip_file]
class = stetl.inputs.fileinput.VsiZipFileInput
file_path = {lv_file}
# file_path = /Users/just/project/nlextract/data/BAG-2.0/BAGNLDL-*.zip
# name_filter = {bag_obj_file_pat}*.xml
name_filter = {bag_obj_file_pat}.zip

# The ogr2ogr command-line, may use any output here, as long as
# the input is a BAG Object Zip file. The input file-path is passed
# as data Packet to this component.
[output_ogr2ogr]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
# destination format: OGR vector format name
dest_format = PostgreSQL
# destination datasource: name of datasource
dest_data_source = "PG:dbname={database} host={host} port={port} user={user} password={password} active_schema={schema}"
# layer creation options will only be added to ogr2ogr on first run
lco = -lco LAUNDER=YES -lco PRECISION=NO
# spatial_extent, translates to -spat xmin ymin xmax ymax
spatial_extent = {spatial_extent}
# miscellaneous ogr2ogr options
options = -overwrite {srs_opts} -gt 65536 {multi_opts} {lvbag_driver_opts}
# cleanup input?
cleanup_input = False

# Alternative outputs for testing

# Send to stdout
[output_std]
class = stetl.outputs.standardoutput.StandardOutput
