# Process-chains for extracting BAG source data from input zip files to PostGIS.
# A Chain is a series of Components: one Input, zero or more Filters and one Output.
# The output of a Component is connected to the input of the next Component (except for
# the final Output Component, which writes to the final destination, e.g. PostGIS or GeoPackage..
#
# Currently 3 chains are executed in the following order:
# - SQL pre:  DB initialization, delete tables, create schema
# - Main ETL chain, consists of the following components
# 1. input_zip_file: reads files from input ZIP file(s)
# 2. extract_zip_file: extracts a zip file from a ZIP file
# 3. output_ogr2ogr: output using ogr2ogr, input is a zip file for one BAG object type, output can be any OGR output
#
# Any substitutable values are specified in curly brackets e.g. {password}.
# Actual values can be passed as args to Stetl main.py.

[etl]
chains = input_sql_pre|schema_name_filter|output_postgres,
#         input_bag_gem_zip_file|extract_bag_zip_file,
#         input_bagobj_gem__zip_file|extract_bagobj_zip_file|vsizip_prepend|output_ogr2ogr
         input_baglv_zip_file|extract_bagobj_zip_file|vsizip_prepend|output_ogr2ogr
#         input_sql_post|schema_name_filter|output_postgres

# Pre SQL file inputs to be executed
[input_sql_pre]
class = stetl.inputs.fileinput.StringFileInput
# file_path = sql/create-schema.sql,sql/drop-tables-v2.1.1.sql,sql/drop-final-tables-v2.1.1.sql
file_path = sql/create-schema.sql

# Post SQL file inputs to be executed
[input_sql_post]
class = stetl.inputs.fileinput.StringFileInput
file_path = sql/create-final-tables-v2.1.1.sql,sql/fix-eindregistratie.sql

# Generic filter to substitute Python-format string values like {schema} in string
[schema_name_filter]
class = stetl.filters.stringfilter.StringSubstitutionFilter
# format args {schema} is schema name
format_args = schema:{schema}

[output_postgres]
class = stetl.outputs.dboutput.PostgresDbOutput
database = {database}
host = {host}
port = {port}
user = {user}
password = {password}
schema = {schema}

# The source input ZIP-file(s) for a Gemeente (Municipality)
# Has different zip structure than country-wide (LV) BAG.
[input_bag_gem_zip_file]
class = stetl.inputs.fileinput.ZipFileInput
file_path = {input_dir}
filename_pattern = BAG*.zip
name_filter=0*GEM*.zip

# The zip file within the gem zipfile contains the zip files for each bag obj type
[input_bagobj_gem__zip_file]
class = stetl.inputs.fileinput.ZipFileInput
file_path = {temp_dir}/bag.zip
name_filter = *[LSVNPOW][ITBUNPP][GAOMDRL]*.zip

# The zip file for the LV zipfile directly contains the zip files for each bag obj type
[input_baglv_zip_file]
class = stetl.inputs.fileinput.ZipFileInput
file_path = {input_dir}/lv/BAGNLDL-*.zip
name_filter = *[LSVNPOW][ITBUNPP][GAOMDRL]*.zip

# Filter to extract a ZIP file one by one to a temporary location
# and pass the zipfile name to the next in Chain.
[extract_bag_zip_file]
class = stetl.filters.zipfileextractor.ZipFileExtractor
file_path = {temp_dir}/bag.zip
delete_file = False

# Filter to extract a ZIP file one by one to a temporary location
# and pass the zipfile name to the next in Chain.
[extract_bagobj_zip_file]
class = stetl.filters.zipfileextractor.ZipFileExtractor
file_path = {temp_dir}/bagobj.zip
delete_file = False

# Filter to generate the vsizip-names for ogr2ogr from input zip file name
[vsizip_prepend]
class = stetl.filters.stringfilter.StringConcatFilter
prepend_string = /vsizip/

# The ogr2ogr command-line, may use any output here, as long as
# the input is a BAG Object Zip file. The input file-path is passed
# as data Packet to this component.
[output_ogr2ogr]
class = stetl.outputs.execoutput.Ogr2OgrExecOutput
# destination format: OGR vector format name
dest_format = PostgreSQL
# destination datasource: name of datasource
dest_data_source = "PG:dbname={database} host={host} port={port} user={user} password={password} active_schema={schema}"
# layer creation options will only be added to ogr2ogr on first run
lco = -lco LAUNDER=YES -lco PRECISION=NO
# spatial_extent, translates to -spat xmin ymin xmax ymax
spatial_extent = {spatial_extent}
# miscellaneous ogr2ogr options
options = -overwrite -append -gt 65536 {multi_opts}
# cleanup input?
cleanup_input = False

# Alternative outputs for testing

# Send to stdout
[output_std]
class = stetl.outputs.standardoutput.StandardOutput
